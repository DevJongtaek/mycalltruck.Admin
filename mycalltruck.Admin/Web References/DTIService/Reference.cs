//------------------------------------------------------------------------------
// <auto-generated>
//     이 코드는 도구를 사용하여 생성되었습니다.
//     런타임 버전:4.0.30319.42000
//
//     파일 내용을 변경하면 잘못된 동작이 발생할 수 있으며, 코드를 다시 생성하면
//     이러한 변경 내용이 손실됩니다.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// 이 소스 코드가 Microsoft.VSDesigner, 버전 4.0.30319.42000에서 자동으로 생성되었습니다.
// 
#pragma warning disable 1591

namespace mycalltruck.Admin.DTIService {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="DTIServiceSoapBinding", Namespace="https://ws.nicedata.co.kr/services/DTIService")]
    public partial class DTIServiceService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback selectTxtnClsOperationCompleted;
        
        private System.Threading.SendOrPostCallback changedStatusReqOperationCompleted;
        
        private System.Threading.SendOrPostCallback changedStatusResOperationCompleted;
        
        private System.Threading.SendOrPostCallback membJoinOperationCompleted;
        
        private System.Threading.SendOrPostCallback updateMembInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback selectMembInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback makeAndPublishSignOperationCompleted;
        
        private System.Threading.SendOrPostCallback updateCertOperationCompleted;
        
        private System.Threading.SendOrPostCallback makeDTIOperationCompleted;
        
        private System.Threading.SendOrPostCallback makeDTIWithFileOperationCompleted;
        
        private System.Threading.SendOrPostCallback publishDTIOperationCompleted;
        
        private System.Threading.SendOrPostCallback makeAndPublishOperationCompleted;
        
        private System.Threading.SendOrPostCallback makeAndPublishWithFileOperationCompleted;
        
        private System.Threading.SendOrPostCallback makePublishSAPOperationCompleted;
        
        private System.Threading.SendOrPostCallback retryPeriodStatusOperationCompleted;
        
        private System.Threading.SendOrPostCallback recvRequestOperationCompleted;
        
        private System.Threading.SendOrPostCallback recvRequestBillOperationCompleted;
        
        private System.Threading.SendOrPostCallback recvConfirmOperationCompleted;
        
        private System.Threading.SendOrPostCallback recvConfirmBillOperationCompleted;
        
        private System.Threading.SendOrPostCallback changeStatusOperationCompleted;
        
        private System.Threading.SendOrPostCallback updateRequestOperationCompleted;
        
        private System.Threading.SendOrPostCallback updateRequestBillOperationCompleted;
        
        private System.Threading.SendOrPostCallback updateRequestBatchOperationCompleted;
        
        private System.Threading.SendOrPostCallback updateConfirmOperationCompleted;
        
        private System.Threading.SendOrPostCallback updateConfirmBillOperationCompleted;
        
        private System.Threading.SendOrPostCallback updateConfirmBatchOperationCompleted;
        
        private System.Threading.SendOrPostCallback sendMultiMailOperationCompleted;
        
        private System.Threading.SendOrPostCallback sendMultiMail2OperationCompleted;
        
        private System.Threading.SendOrPostCallback selectBillStatusOperationCompleted;
        
        private System.Threading.SendOrPostCallback selectExpireDtOperationCompleted;
        
        private System.Threading.SendOrPostCallback selectPointOperationCompleted;
        
        private System.Threading.SendOrPostCallback getPKIPolicyOperationCompleted;
        
        private System.Threading.SendOrPostCallback getSecPasswdOperationCompleted;
        
        private System.Threading.SendOrPostCallback initConnectionOperationCompleted;
        
        private System.Threading.SendOrPostCallback selectMembInfoJsonOperationCompleted;
        
        private System.Threading.SendOrPostCallback getMembJoinInfOperationCompleted;
        
        private System.Threading.SendOrPostCallback changedStatusReqByIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback changedStatusReqByLinkCdOperationCompleted;
        
        private System.Threading.SendOrPostCallback changedStatusResByLinkCdOperationCompleted;
        
        private System.Threading.SendOrPostCallback makeAndPublishSignDelayOperationCompleted;
        
        private System.Threading.SendOrPostCallback updateEtaxStatusToZOperationCompleted;
        
        private System.Threading.SendOrPostCallback makeSpecTranOperationCompleted;
        
        private System.Threading.SendOrPostCallback sendSpecTranMailOperationCompleted;
        
        private System.Threading.SendOrPostCallback sendEtaxFaxOperationCompleted;
        
        private System.Threading.SendOrPostCallback retryPeriodStatusNewOperationCompleted;
        
        private System.Threading.SendOrPostCallback retryPeriodStatusNewBillOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public DTIServiceService() {
            this.Url = global::mycalltruck.Admin.Properties.Settings.Default.mycalltruck_Admin_DTIService_DTIServiceService;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event selectTxtnClsCompletedEventHandler selectTxtnClsCompleted;
        
        /// <remarks/>
        public event changedStatusReqCompletedEventHandler changedStatusReqCompleted;
        
        /// <remarks/>
        public event changedStatusResCompletedEventHandler changedStatusResCompleted;
        
        /// <remarks/>
        public event membJoinCompletedEventHandler membJoinCompleted;
        
        /// <remarks/>
        public event updateMembInfoCompletedEventHandler updateMembInfoCompleted;
        
        /// <remarks/>
        public event selectMembInfoCompletedEventHandler selectMembInfoCompleted;
        
        /// <remarks/>
        public event makeAndPublishSignCompletedEventHandler makeAndPublishSignCompleted;
        
        /// <remarks/>
        public event updateCertCompletedEventHandler updateCertCompleted;
        
        /// <remarks/>
        public event makeDTICompletedEventHandler makeDTICompleted;
        
        /// <remarks/>
        public event makeDTIWithFileCompletedEventHandler makeDTIWithFileCompleted;
        
        /// <remarks/>
        public event publishDTICompletedEventHandler publishDTICompleted;
        
        /// <remarks/>
        public event makeAndPublishCompletedEventHandler makeAndPublishCompleted;
        
        /// <remarks/>
        public event makeAndPublishWithFileCompletedEventHandler makeAndPublishWithFileCompleted;
        
        /// <remarks/>
        public event makePublishSAPCompletedEventHandler makePublishSAPCompleted;
        
        /// <remarks/>
        public event retryPeriodStatusCompletedEventHandler retryPeriodStatusCompleted;
        
        /// <remarks/>
        public event recvRequestCompletedEventHandler recvRequestCompleted;
        
        /// <remarks/>
        public event recvRequestBillCompletedEventHandler recvRequestBillCompleted;
        
        /// <remarks/>
        public event recvConfirmCompletedEventHandler recvConfirmCompleted;
        
        /// <remarks/>
        public event recvConfirmBillCompletedEventHandler recvConfirmBillCompleted;
        
        /// <remarks/>
        public event changeStatusCompletedEventHandler changeStatusCompleted;
        
        /// <remarks/>
        public event updateRequestCompletedEventHandler updateRequestCompleted;
        
        /// <remarks/>
        public event updateRequestBillCompletedEventHandler updateRequestBillCompleted;
        
        /// <remarks/>
        public event updateRequestBatchCompletedEventHandler updateRequestBatchCompleted;
        
        /// <remarks/>
        public event updateConfirmCompletedEventHandler updateConfirmCompleted;
        
        /// <remarks/>
        public event updateConfirmBillCompletedEventHandler updateConfirmBillCompleted;
        
        /// <remarks/>
        public event updateConfirmBatchCompletedEventHandler updateConfirmBatchCompleted;
        
        /// <remarks/>
        public event sendMultiMailCompletedEventHandler sendMultiMailCompleted;
        
        /// <remarks/>
        public event sendMultiMail2CompletedEventHandler sendMultiMail2Completed;
        
        /// <remarks/>
        public event selectBillStatusCompletedEventHandler selectBillStatusCompleted;
        
        /// <remarks/>
        public event selectExpireDtCompletedEventHandler selectExpireDtCompleted;
        
        /// <remarks/>
        public event selectPointCompletedEventHandler selectPointCompleted;
        
        /// <remarks/>
        public event getPKIPolicyCompletedEventHandler getPKIPolicyCompleted;
        
        /// <remarks/>
        public event getSecPasswdCompletedEventHandler getSecPasswdCompleted;
        
        /// <remarks/>
        public event initConnectionCompletedEventHandler initConnectionCompleted;
        
        /// <remarks/>
        public event selectMembInfoJsonCompletedEventHandler selectMembInfoJsonCompleted;
        
        /// <remarks/>
        public event getMembJoinInfCompletedEventHandler getMembJoinInfCompleted;
        
        /// <remarks/>
        public event changedStatusReqByIdCompletedEventHandler changedStatusReqByIdCompleted;
        
        /// <remarks/>
        public event changedStatusReqByLinkCdCompletedEventHandler changedStatusReqByLinkCdCompleted;
        
        /// <remarks/>
        public event changedStatusResByLinkCdCompletedEventHandler changedStatusResByLinkCdCompleted;
        
        /// <remarks/>
        public event makeAndPublishSignDelayCompletedEventHandler makeAndPublishSignDelayCompleted;
        
        /// <remarks/>
        public event updateEtaxStatusToZCompletedEventHandler updateEtaxStatusToZCompleted;
        
        /// <remarks/>
        public event makeSpecTranCompletedEventHandler makeSpecTranCompleted;
        
        /// <remarks/>
        public event sendSpecTranMailCompletedEventHandler sendSpecTranMailCompleted;
        
        /// <remarks/>
        public event sendEtaxFaxCompletedEventHandler sendEtaxFaxCompleted;
        
        /// <remarks/>
        public event retryPeriodStatusNewCompletedEventHandler retryPeriodStatusNewCompleted;
        
        /// <remarks/>
        public event retryPeriodStatusNewBillCompletedEventHandler retryPeriodStatusNewBillCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="https://ws.nicedata.co.kr/services/DTIService", ResponseNamespace="https://ws.nicedata.co.kr/services/DTIService")]
        public void selectTxtnCls(string bizNo, out string retVal, out string errMsg, out string taxType, out string closeYmd) {
            object[] results = this.Invoke("selectTxtnCls", new object[] {
                        bizNo});
            retVal = ((string)(results[0]));
            errMsg = ((string)(results[1]));
            taxType = ((string)(results[2]));
            closeYmd = ((string)(results[3]));
        }
        
        /// <remarks/>
        public void selectTxtnClsAsync(string bizNo) {
            this.selectTxtnClsAsync(bizNo, null);
        }
        
        /// <remarks/>
        public void selectTxtnClsAsync(string bizNo, object userState) {
            if ((this.selectTxtnClsOperationCompleted == null)) {
                this.selectTxtnClsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnselectTxtnClsOperationCompleted);
            }
            this.InvokeAsync("selectTxtnCls", new object[] {
                        bizNo}, this.selectTxtnClsOperationCompleted, userState);
        }
        
        private void OnselectTxtnClsOperationCompleted(object arg) {
            if ((this.selectTxtnClsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.selectTxtnClsCompleted(this, new selectTxtnClsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="https://ws.nicedata.co.kr/services/DTIService", ResponseNamespace="https://ws.nicedata.co.kr/services/DTIService")]
        public void changedStatusReq(string linkCd, string frnNo, string userid, string passwd, string startYYYYMMDD, string endYYYYMMDD, out string retVal, out string errMsg, out string statusMsg) {
            object[] results = this.Invoke("changedStatusReq", new object[] {
                        linkCd,
                        frnNo,
                        userid,
                        passwd,
                        startYYYYMMDD,
                        endYYYYMMDD});
            retVal = ((string)(results[0]));
            errMsg = ((string)(results[1]));
            statusMsg = ((string)(results[2]));
        }
        
        /// <remarks/>
        public void changedStatusReqAsync(string linkCd, string frnNo, string userid, string passwd, string startYYYYMMDD, string endYYYYMMDD) {
            this.changedStatusReqAsync(linkCd, frnNo, userid, passwd, startYYYYMMDD, endYYYYMMDD, null);
        }
        
        /// <remarks/>
        public void changedStatusReqAsync(string linkCd, string frnNo, string userid, string passwd, string startYYYYMMDD, string endYYYYMMDD, object userState) {
            if ((this.changedStatusReqOperationCompleted == null)) {
                this.changedStatusReqOperationCompleted = new System.Threading.SendOrPostCallback(this.OnchangedStatusReqOperationCompleted);
            }
            this.InvokeAsync("changedStatusReq", new object[] {
                        linkCd,
                        frnNo,
                        userid,
                        passwd,
                        startYYYYMMDD,
                        endYYYYMMDD}, this.changedStatusReqOperationCompleted, userState);
        }
        
        private void OnchangedStatusReqOperationCompleted(object arg) {
            if ((this.changedStatusReqCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.changedStatusReqCompleted(this, new changedStatusReqCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="https://ws.nicedata.co.kr/services/DTIService", ResponseNamespace="https://ws.nicedata.co.kr/services/DTIService")]
        public void changedStatusRes(string linkCd, string frnNo, string userid, string passwd, string statusMsg, out string retVal, out string errMsg) {
            object[] results = this.Invoke("changedStatusRes", new object[] {
                        linkCd,
                        frnNo,
                        userid,
                        passwd,
                        statusMsg});
            retVal = ((string)(results[0]));
            errMsg = ((string)(results[1]));
        }
        
        /// <remarks/>
        public void changedStatusResAsync(string linkCd, string frnNo, string userid, string passwd, string statusMsg) {
            this.changedStatusResAsync(linkCd, frnNo, userid, passwd, statusMsg, null);
        }
        
        /// <remarks/>
        public void changedStatusResAsync(string linkCd, string frnNo, string userid, string passwd, string statusMsg, object userState) {
            if ((this.changedStatusResOperationCompleted == null)) {
                this.changedStatusResOperationCompleted = new System.Threading.SendOrPostCallback(this.OnchangedStatusResOperationCompleted);
            }
            this.InvokeAsync("changedStatusRes", new object[] {
                        linkCd,
                        frnNo,
                        userid,
                        passwd,
                        statusMsg}, this.changedStatusResOperationCompleted, userState);
        }
        
        private void OnchangedStatusResOperationCompleted(object arg) {
            if ((this.changedStatusResCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.changedStatusResCompleted(this, new changedStatusResCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="https://ws.nicedata.co.kr/services/DTIService", ResponseNamespace="https://ws.nicedata.co.kr/services/DTIService")]
        [return: System.Xml.Serialization.SoapElementAttribute("membJoinReturn")]
        public string membJoin(
                    string linkCd, 
                    string linkId, 
                    string bizNo, 
                    string custName, 
                    string ownerName, 
                    string bizCond, 
                    string bizItem, 
                    string rsbmName, 
                    string email, 
                    string telNo, 
                    string hpNo, 
                    string zipCode, 
                    string addr1, 
                    string addr2, 
                    out string retVal, 
                    out string errMsg, 
                    out string frnNo, 
                    out string userid, 
                    out string passwd) {
            object[] results = this.Invoke("membJoin", new object[] {
                        linkCd,
                        linkId,
                        bizNo,
                        custName,
                        ownerName,
                        bizCond,
                        bizItem,
                        rsbmName,
                        email,
                        telNo,
                        hpNo,
                        zipCode,
                        addr1,
                        addr2});
            retVal = ((string)(results[1]));
            errMsg = ((string)(results[2]));
            frnNo = ((string)(results[3]));
            userid = ((string)(results[4]));
            passwd = ((string)(results[5]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void membJoinAsync(string linkCd, string linkId, string bizNo, string custName, string ownerName, string bizCond, string bizItem, string rsbmName, string email, string telNo, string hpNo, string zipCode, string addr1, string addr2) {
            this.membJoinAsync(linkCd, linkId, bizNo, custName, ownerName, bizCond, bizItem, rsbmName, email, telNo, hpNo, zipCode, addr1, addr2, null);
        }
        
        /// <remarks/>
        public void membJoinAsync(string linkCd, string linkId, string bizNo, string custName, string ownerName, string bizCond, string bizItem, string rsbmName, string email, string telNo, string hpNo, string zipCode, string addr1, string addr2, object userState) {
            if ((this.membJoinOperationCompleted == null)) {
                this.membJoinOperationCompleted = new System.Threading.SendOrPostCallback(this.OnmembJoinOperationCompleted);
            }
            this.InvokeAsync("membJoin", new object[] {
                        linkCd,
                        linkId,
                        bizNo,
                        custName,
                        ownerName,
                        bizCond,
                        bizItem,
                        rsbmName,
                        email,
                        telNo,
                        hpNo,
                        zipCode,
                        addr1,
                        addr2}, this.membJoinOperationCompleted, userState);
        }
        
        private void OnmembJoinOperationCompleted(object arg) {
            if ((this.membJoinCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.membJoinCompleted(this, new membJoinCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="https://ws.nicedata.co.kr/services/DTIService", ResponseNamespace="https://ws.nicedata.co.kr/services/DTIService")]
        [return: System.Xml.Serialization.SoapElementAttribute("updateMembInfoReturn")]
        public string updateMembInfo(
                    string linkCd, 
                    string frnNo, 
                    string userid, 
                    string passwd, 
                    string custName, 
                    string ownerName, 
                    string bizCond, 
                    string bizItem, 
                    string rsbmName, 
                    string email, 
                    string telNo, 
                    string hpNo, 
                    string zipCode, 
                    string addr1, 
                    string addr2, 
                    out string retVal, 
                    out string errMsg) {
            object[] results = this.Invoke("updateMembInfo", new object[] {
                        linkCd,
                        frnNo,
                        userid,
                        passwd,
                        custName,
                        ownerName,
                        bizCond,
                        bizItem,
                        rsbmName,
                        email,
                        telNo,
                        hpNo,
                        zipCode,
                        addr1,
                        addr2});
            retVal = ((string)(results[1]));
            errMsg = ((string)(results[2]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void updateMembInfoAsync(string linkCd, string frnNo, string userid, string passwd, string custName, string ownerName, string bizCond, string bizItem, string rsbmName, string email, string telNo, string hpNo, string zipCode, string addr1, string addr2) {
            this.updateMembInfoAsync(linkCd, frnNo, userid, passwd, custName, ownerName, bizCond, bizItem, rsbmName, email, telNo, hpNo, zipCode, addr1, addr2, null);
        }
        
        /// <remarks/>
        public void updateMembInfoAsync(
                    string linkCd, 
                    string frnNo, 
                    string userid, 
                    string passwd, 
                    string custName, 
                    string ownerName, 
                    string bizCond, 
                    string bizItem, 
                    string rsbmName, 
                    string email, 
                    string telNo, 
                    string hpNo, 
                    string zipCode, 
                    string addr1, 
                    string addr2, 
                    object userState) {
            if ((this.updateMembInfoOperationCompleted == null)) {
                this.updateMembInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnupdateMembInfoOperationCompleted);
            }
            this.InvokeAsync("updateMembInfo", new object[] {
                        linkCd,
                        frnNo,
                        userid,
                        passwd,
                        custName,
                        ownerName,
                        bizCond,
                        bizItem,
                        rsbmName,
                        email,
                        telNo,
                        hpNo,
                        zipCode,
                        addr1,
                        addr2}, this.updateMembInfoOperationCompleted, userState);
        }
        
        private void OnupdateMembInfoOperationCompleted(object arg) {
            if ((this.updateMembInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.updateMembInfoCompleted(this, new updateMembInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="https://ws.nicedata.co.kr/services/DTIService", ResponseNamespace="https://ws.nicedata.co.kr/services/DTIService")]
        [return: System.Xml.Serialization.SoapElementAttribute("selectMembInfoReturn")]
        public string selectMembInfo(
                    string linkCd, 
                    string frnNo, 
                    string userid, 
                    string passwd, 
                    out string retVal, 
                    out string errMsg, 
                    out string bizNo, 
                    out string custName, 
                    out string ownerName, 
                    out string bizCond, 
                    out string bizItem, 
                    out string rsbmName, 
                    out string email, 
                    out string telNo, 
                    out string hpNo, 
                    out string zipCode, 
                    out string addr1, 
                    out string addr2) {
            object[] results = this.Invoke("selectMembInfo", new object[] {
                        linkCd,
                        frnNo,
                        userid,
                        passwd});
            retVal = ((string)(results[1]));
            errMsg = ((string)(results[2]));
            bizNo = ((string)(results[3]));
            custName = ((string)(results[4]));
            ownerName = ((string)(results[5]));
            bizCond = ((string)(results[6]));
            bizItem = ((string)(results[7]));
            rsbmName = ((string)(results[8]));
            email = ((string)(results[9]));
            telNo = ((string)(results[10]));
            hpNo = ((string)(results[11]));
            zipCode = ((string)(results[12]));
            addr1 = ((string)(results[13]));
            addr2 = ((string)(results[14]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void selectMembInfoAsync(string linkCd, string frnNo, string userid, string passwd) {
            this.selectMembInfoAsync(linkCd, frnNo, userid, passwd, null);
        }
        
        /// <remarks/>
        public void selectMembInfoAsync(string linkCd, string frnNo, string userid, string passwd, object userState) {
            if ((this.selectMembInfoOperationCompleted == null)) {
                this.selectMembInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnselectMembInfoOperationCompleted);
            }
            this.InvokeAsync("selectMembInfo", new object[] {
                        linkCd,
                        frnNo,
                        userid,
                        passwd}, this.selectMembInfoOperationCompleted, userState);
        }
        
        private void OnselectMembInfoOperationCompleted(object arg) {
            if ((this.selectMembInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.selectMembInfoCompleted(this, new selectMembInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="https://ws.nicedata.co.kr/services/DTIService", ResponseNamespace="https://ws.nicedata.co.kr/services/DTIService")]
        public void makeAndPublishSign(string linkCd, string frnNo, string userid, string passwd, string certPw, string dtiXml, string sendMailYn, string sendSmsYn, string sendSmsMsg, out string retVal, out string errMsg, out string billNo, out string gnlPoint, out string bnsPoint, out string totPoint) {
            object[] results = this.Invoke("makeAndPublishSign", new object[] {
                        linkCd,
                        frnNo,
                        userid,
                        passwd,
                        certPw,
                        dtiXml,
                        sendMailYn,
                        sendSmsYn,
                        sendSmsMsg});
            retVal = ((string)(results[0]));
            errMsg = ((string)(results[1]));
            billNo = ((string)(results[2]));
            gnlPoint = ((string)(results[3]));
            bnsPoint = ((string)(results[4]));
            totPoint = ((string)(results[5]));
        }
        
        /// <remarks/>
        public void makeAndPublishSignAsync(string linkCd, string frnNo, string userid, string passwd, string certPw, string dtiXml, string sendMailYn, string sendSmsYn, string sendSmsMsg) {
            this.makeAndPublishSignAsync(linkCd, frnNo, userid, passwd, certPw, dtiXml, sendMailYn, sendSmsYn, sendSmsMsg, null);
        }
        
        /// <remarks/>
        public void makeAndPublishSignAsync(string linkCd, string frnNo, string userid, string passwd, string certPw, string dtiXml, string sendMailYn, string sendSmsYn, string sendSmsMsg, object userState) {
            if ((this.makeAndPublishSignOperationCompleted == null)) {
                this.makeAndPublishSignOperationCompleted = new System.Threading.SendOrPostCallback(this.OnmakeAndPublishSignOperationCompleted);
            }
            this.InvokeAsync("makeAndPublishSign", new object[] {
                        linkCd,
                        frnNo,
                        userid,
                        passwd,
                        certPw,
                        dtiXml,
                        sendMailYn,
                        sendSmsYn,
                        sendSmsMsg}, this.makeAndPublishSignOperationCompleted, userState);
        }
        
        private void OnmakeAndPublishSignOperationCompleted(object arg) {
            if ((this.makeAndPublishSignCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.makeAndPublishSignCompleted(this, new makeAndPublishSignCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="https://ws.nicedata.co.kr/services/DTIService", ResponseNamespace="https://ws.nicedata.co.kr/services/DTIService")]
        public void updateCert(string linkCd, string frnNo, string userid, string passwd, string certNo, string rVal, string dnVal, string expireYmd, out string retVal, out string errMsg) {
            object[] results = this.Invoke("updateCert", new object[] {
                        linkCd,
                        frnNo,
                        userid,
                        passwd,
                        certNo,
                        rVal,
                        dnVal,
                        expireYmd});
            retVal = ((string)(results[0]));
            errMsg = ((string)(results[1]));
        }
        
        /// <remarks/>
        public void updateCertAsync(string linkCd, string frnNo, string userid, string passwd, string certNo, string rVal, string dnVal, string expireYmd) {
            this.updateCertAsync(linkCd, frnNo, userid, passwd, certNo, rVal, dnVal, expireYmd, null);
        }
        
        /// <remarks/>
        public void updateCertAsync(string linkCd, string frnNo, string userid, string passwd, string certNo, string rVal, string dnVal, string expireYmd, object userState) {
            if ((this.updateCertOperationCompleted == null)) {
                this.updateCertOperationCompleted = new System.Threading.SendOrPostCallback(this.OnupdateCertOperationCompleted);
            }
            this.InvokeAsync("updateCert", new object[] {
                        linkCd,
                        frnNo,
                        userid,
                        passwd,
                        certNo,
                        rVal,
                        dnVal,
                        expireYmd}, this.updateCertOperationCompleted, userState);
        }
        
        private void OnupdateCertOperationCompleted(object arg) {
            if ((this.updateCertCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.updateCertCompleted(this, new updateCertCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="https://ws.nicedata.co.kr/services/DTIService", ResponseNamespace="https://ws.nicedata.co.kr/services/DTIService")]
        public void makeDTI(string linkCd, string frnNo, string userid, string passwd, string billNo, string status, string srchOption, string DTIXml, string etcXml, out string retVal, out string errMsg, out string digest, out string point) {
            object[] results = this.Invoke("makeDTI", new object[] {
                        linkCd,
                        frnNo,
                        userid,
                        passwd,
                        billNo,
                        status,
                        srchOption,
                        DTIXml,
                        etcXml});
            retVal = ((string)(results[0]));
            errMsg = ((string)(results[1]));
            digest = ((string)(results[2]));
            point = ((string)(results[3]));
        }
        
        /// <remarks/>
        public void makeDTIAsync(string linkCd, string frnNo, string userid, string passwd, string billNo, string status, string srchOption, string DTIXml, string etcXml) {
            this.makeDTIAsync(linkCd, frnNo, userid, passwd, billNo, status, srchOption, DTIXml, etcXml, null);
        }
        
        /// <remarks/>
        public void makeDTIAsync(string linkCd, string frnNo, string userid, string passwd, string billNo, string status, string srchOption, string DTIXml, string etcXml, object userState) {
            if ((this.makeDTIOperationCompleted == null)) {
                this.makeDTIOperationCompleted = new System.Threading.SendOrPostCallback(this.OnmakeDTIOperationCompleted);
            }
            this.InvokeAsync("makeDTI", new object[] {
                        linkCd,
                        frnNo,
                        userid,
                        passwd,
                        billNo,
                        status,
                        srchOption,
                        DTIXml,
                        etcXml}, this.makeDTIOperationCompleted, userState);
        }
        
        private void OnmakeDTIOperationCompleted(object arg) {
            if ((this.makeDTICompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.makeDTICompleted(this, new makeDTICompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="https://ws.nicedata.co.kr/services/DTIService", ResponseNamespace="https://ws.nicedata.co.kr/services/DTIService")]
        public void makeDTIWithFile(string linkCd, string frnNo, string userid, string passwd, string billNo, string status, string srchOption, string DTIXml, string etcXml, string fileName, [System.Xml.Serialization.SoapElementAttribute(DataType="base64Binary")] byte[] fileData, out string retVal, out string errMsg, out string digest, out string point) {
            object[] results = this.Invoke("makeDTIWithFile", new object[] {
                        linkCd,
                        frnNo,
                        userid,
                        passwd,
                        billNo,
                        status,
                        srchOption,
                        DTIXml,
                        etcXml,
                        fileName,
                        fileData});
            retVal = ((string)(results[0]));
            errMsg = ((string)(results[1]));
            digest = ((string)(results[2]));
            point = ((string)(results[3]));
        }
        
        /// <remarks/>
        public void makeDTIWithFileAsync(string linkCd, string frnNo, string userid, string passwd, string billNo, string status, string srchOption, string DTIXml, string etcXml, string fileName, byte[] fileData) {
            this.makeDTIWithFileAsync(linkCd, frnNo, userid, passwd, billNo, status, srchOption, DTIXml, etcXml, fileName, fileData, null);
        }
        
        /// <remarks/>
        public void makeDTIWithFileAsync(string linkCd, string frnNo, string userid, string passwd, string billNo, string status, string srchOption, string DTIXml, string etcXml, string fileName, byte[] fileData, object userState) {
            if ((this.makeDTIWithFileOperationCompleted == null)) {
                this.makeDTIWithFileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnmakeDTIWithFileOperationCompleted);
            }
            this.InvokeAsync("makeDTIWithFile", new object[] {
                        linkCd,
                        frnNo,
                        userid,
                        passwd,
                        billNo,
                        status,
                        srchOption,
                        DTIXml,
                        etcXml,
                        fileName,
                        fileData}, this.makeDTIWithFileOperationCompleted, userState);
        }
        
        private void OnmakeDTIWithFileOperationCompleted(object arg) {
            if ((this.makeDTIWithFileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.makeDTIWithFileCompleted(this, new makeDTIWithFileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="https://ws.nicedata.co.kr/services/DTIService", ResponseNamespace="https://ws.nicedata.co.kr/services/DTIService")]
        public void publishDTI(string linkCd, string frnNo, string userid, string passwd, string billNo, string status, string dnVal, string digest, string signVal, out string retVal, out string errMsg) {
            object[] results = this.Invoke("publishDTI", new object[] {
                        linkCd,
                        frnNo,
                        userid,
                        passwd,
                        billNo,
                        status,
                        dnVal,
                        digest,
                        signVal});
            retVal = ((string)(results[0]));
            errMsg = ((string)(results[1]));
        }
        
        /// <remarks/>
        public void publishDTIAsync(string linkCd, string frnNo, string userid, string passwd, string billNo, string status, string dnVal, string digest, string signVal) {
            this.publishDTIAsync(linkCd, frnNo, userid, passwd, billNo, status, dnVal, digest, signVal, null);
        }
        
        /// <remarks/>
        public void publishDTIAsync(string linkCd, string frnNo, string userid, string passwd, string billNo, string status, string dnVal, string digest, string signVal, object userState) {
            if ((this.publishDTIOperationCompleted == null)) {
                this.publishDTIOperationCompleted = new System.Threading.SendOrPostCallback(this.OnpublishDTIOperationCompleted);
            }
            this.InvokeAsync("publishDTI", new object[] {
                        linkCd,
                        frnNo,
                        userid,
                        passwd,
                        billNo,
                        status,
                        dnVal,
                        digest,
                        signVal}, this.publishDTIOperationCompleted, userState);
        }
        
        private void OnpublishDTIOperationCompleted(object arg) {
            if ((this.publishDTICompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.publishDTICompleted(this, new publishDTICompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="https://ws.nicedata.co.kr/services/DTIService", ResponseNamespace="https://ws.nicedata.co.kr/services/DTIService")]
        public void makeAndPublish(string linkCd, string frnNo, string userid, string passwd, string billNo, string status, string dnVal, string DTIXml, string etcXml, out string retVal, out string errMsg) {
            object[] results = this.Invoke("makeAndPublish", new object[] {
                        linkCd,
                        frnNo,
                        userid,
                        passwd,
                        billNo,
                        status,
                        dnVal,
                        DTIXml,
                        etcXml});
            retVal = ((string)(results[0]));
            errMsg = ((string)(results[1]));
        }
        
        /// <remarks/>
        public void makeAndPublishAsync(string linkCd, string frnNo, string userid, string passwd, string billNo, string status, string dnVal, string DTIXml, string etcXml) {
            this.makeAndPublishAsync(linkCd, frnNo, userid, passwd, billNo, status, dnVal, DTIXml, etcXml, null);
        }
        
        /// <remarks/>
        public void makeAndPublishAsync(string linkCd, string frnNo, string userid, string passwd, string billNo, string status, string dnVal, string DTIXml, string etcXml, object userState) {
            if ((this.makeAndPublishOperationCompleted == null)) {
                this.makeAndPublishOperationCompleted = new System.Threading.SendOrPostCallback(this.OnmakeAndPublishOperationCompleted);
            }
            this.InvokeAsync("makeAndPublish", new object[] {
                        linkCd,
                        frnNo,
                        userid,
                        passwd,
                        billNo,
                        status,
                        dnVal,
                        DTIXml,
                        etcXml}, this.makeAndPublishOperationCompleted, userState);
        }
        
        private void OnmakeAndPublishOperationCompleted(object arg) {
            if ((this.makeAndPublishCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.makeAndPublishCompleted(this, new makeAndPublishCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="https://ws.nicedata.co.kr/services/DTIService", ResponseNamespace="https://ws.nicedata.co.kr/services/DTIService")]
        public void makeAndPublishWithFile(string linkCd, string frnNo, string userid, string passwd, string billNo, string status, string dnVal, string DTIXml, string etcXml, string fileName, [System.Xml.Serialization.SoapElementAttribute(DataType="base64Binary")] byte[] fileData, out string retVal, out string errMsg) {
            object[] results = this.Invoke("makeAndPublishWithFile", new object[] {
                        linkCd,
                        frnNo,
                        userid,
                        passwd,
                        billNo,
                        status,
                        dnVal,
                        DTIXml,
                        etcXml,
                        fileName,
                        fileData});
            retVal = ((string)(results[0]));
            errMsg = ((string)(results[1]));
        }
        
        /// <remarks/>
        public void makeAndPublishWithFileAsync(string linkCd, string frnNo, string userid, string passwd, string billNo, string status, string dnVal, string DTIXml, string etcXml, string fileName, byte[] fileData) {
            this.makeAndPublishWithFileAsync(linkCd, frnNo, userid, passwd, billNo, status, dnVal, DTIXml, etcXml, fileName, fileData, null);
        }
        
        /// <remarks/>
        public void makeAndPublishWithFileAsync(string linkCd, string frnNo, string userid, string passwd, string billNo, string status, string dnVal, string DTIXml, string etcXml, string fileName, byte[] fileData, object userState) {
            if ((this.makeAndPublishWithFileOperationCompleted == null)) {
                this.makeAndPublishWithFileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnmakeAndPublishWithFileOperationCompleted);
            }
            this.InvokeAsync("makeAndPublishWithFile", new object[] {
                        linkCd,
                        frnNo,
                        userid,
                        passwd,
                        billNo,
                        status,
                        dnVal,
                        DTIXml,
                        etcXml,
                        fileName,
                        fileData}, this.makeAndPublishWithFileOperationCompleted, userState);
        }
        
        private void OnmakeAndPublishWithFileOperationCompleted(object arg) {
            if ((this.makeAndPublishWithFileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.makeAndPublishWithFileCompleted(this, new makeAndPublishWithFileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="https://ws.nicedata.co.kr/services/DTIService", ResponseNamespace="https://ws.nicedata.co.kr/services/DTIService")]
        public void makePublishSAP(string frnNo, string userid, string passwd, string billNo, string dnVal, string DTIXml, string fileName, [System.Xml.Serialization.SoapElementAttribute(DataType="base64Binary")] byte[] fileData, out string retVal, out string errMsg) {
            object[] results = this.Invoke("makePublishSAP", new object[] {
                        frnNo,
                        userid,
                        passwd,
                        billNo,
                        dnVal,
                        DTIXml,
                        fileName,
                        fileData});
            retVal = ((string)(results[0]));
            errMsg = ((string)(results[1]));
        }
        
        /// <remarks/>
        public void makePublishSAPAsync(string frnNo, string userid, string passwd, string billNo, string dnVal, string DTIXml, string fileName, byte[] fileData) {
            this.makePublishSAPAsync(frnNo, userid, passwd, billNo, dnVal, DTIXml, fileName, fileData, null);
        }
        
        /// <remarks/>
        public void makePublishSAPAsync(string frnNo, string userid, string passwd, string billNo, string dnVal, string DTIXml, string fileName, byte[] fileData, object userState) {
            if ((this.makePublishSAPOperationCompleted == null)) {
                this.makePublishSAPOperationCompleted = new System.Threading.SendOrPostCallback(this.OnmakePublishSAPOperationCompleted);
            }
            this.InvokeAsync("makePublishSAP", new object[] {
                        frnNo,
                        userid,
                        passwd,
                        billNo,
                        dnVal,
                        DTIXml,
                        fileName,
                        fileData}, this.makePublishSAPOperationCompleted, userState);
        }
        
        private void OnmakePublishSAPOperationCompleted(object arg) {
            if ((this.makePublishSAPCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.makePublishSAPCompleted(this, new makePublishSAPCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="https://ws.nicedata.co.kr/services/DTIService", ResponseNamespace="https://ws.nicedata.co.kr/services/DTIService")]
        [return: System.Xml.Serialization.SoapElementAttribute("retryPeriodStatusReturn")]
        public string retryPeriodStatus(string linkCd, string frnNo, string userid, string passwd, string startYYYYMMDD, string endYYYYMMDD, out string retVal, out string errMsg) {
            object[] results = this.Invoke("retryPeriodStatus", new object[] {
                        linkCd,
                        frnNo,
                        userid,
                        passwd,
                        startYYYYMMDD,
                        endYYYYMMDD});
            retVal = ((string)(results[1]));
            errMsg = ((string)(results[2]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void retryPeriodStatusAsync(string linkCd, string frnNo, string userid, string passwd, string startYYYYMMDD, string endYYYYMMDD) {
            this.retryPeriodStatusAsync(linkCd, frnNo, userid, passwd, startYYYYMMDD, endYYYYMMDD, null);
        }
        
        /// <remarks/>
        public void retryPeriodStatusAsync(string linkCd, string frnNo, string userid, string passwd, string startYYYYMMDD, string endYYYYMMDD, object userState) {
            if ((this.retryPeriodStatusOperationCompleted == null)) {
                this.retryPeriodStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnretryPeriodStatusOperationCompleted);
            }
            this.InvokeAsync("retryPeriodStatus", new object[] {
                        linkCd,
                        frnNo,
                        userid,
                        passwd,
                        startYYYYMMDD,
                        endYYYYMMDD}, this.retryPeriodStatusOperationCompleted, userState);
        }
        
        private void OnretryPeriodStatusOperationCompleted(object arg) {
            if ((this.retryPeriodStatusCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.retryPeriodStatusCompleted(this, new retryPeriodStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="https://ws.nicedata.co.kr/services/DTIService", ResponseNamespace="https://ws.nicedata.co.kr/services/DTIService")]
        public void recvRequest(string linkCd, string frnNo, string userid, string passwd, out string retVal, out string errMsg, out string recvYn, out string billNo, out string status, out string DTIXml) {
            object[] results = this.Invoke("recvRequest", new object[] {
                        linkCd,
                        frnNo,
                        userid,
                        passwd});
            retVal = ((string)(results[0]));
            errMsg = ((string)(results[1]));
            recvYn = ((string)(results[2]));
            billNo = ((string)(results[3]));
            status = ((string)(results[4]));
            DTIXml = ((string)(results[5]));
        }
        
        /// <remarks/>
        public void recvRequestAsync(string linkCd, string frnNo, string userid, string passwd) {
            this.recvRequestAsync(linkCd, frnNo, userid, passwd, null);
        }
        
        /// <remarks/>
        public void recvRequestAsync(string linkCd, string frnNo, string userid, string passwd, object userState) {
            if ((this.recvRequestOperationCompleted == null)) {
                this.recvRequestOperationCompleted = new System.Threading.SendOrPostCallback(this.OnrecvRequestOperationCompleted);
            }
            this.InvokeAsync("recvRequest", new object[] {
                        linkCd,
                        frnNo,
                        userid,
                        passwd}, this.recvRequestOperationCompleted, userState);
        }
        
        private void OnrecvRequestOperationCompleted(object arg) {
            if ((this.recvRequestCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.recvRequestCompleted(this, new recvRequestCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="https://ws.nicedata.co.kr/services/DTIService", ResponseNamespace="https://ws.nicedata.co.kr/services/DTIService")]
        public void recvRequestBill(string linkCd, string frnNo, string userid, string passwd, out string retVal, out string errMsg, out string recvYn, out string billNo, out string status, out string DTIXml) {
            object[] results = this.Invoke("recvRequestBill", new object[] {
                        linkCd,
                        frnNo,
                        userid,
                        passwd});
            retVal = ((string)(results[0]));
            errMsg = ((string)(results[1]));
            recvYn = ((string)(results[2]));
            billNo = ((string)(results[3]));
            status = ((string)(results[4]));
            DTIXml = ((string)(results[5]));
        }
        
        /// <remarks/>
        public void recvRequestBillAsync(string linkCd, string frnNo, string userid, string passwd) {
            this.recvRequestBillAsync(linkCd, frnNo, userid, passwd, null);
        }
        
        /// <remarks/>
        public void recvRequestBillAsync(string linkCd, string frnNo, string userid, string passwd, object userState) {
            if ((this.recvRequestBillOperationCompleted == null)) {
                this.recvRequestBillOperationCompleted = new System.Threading.SendOrPostCallback(this.OnrecvRequestBillOperationCompleted);
            }
            this.InvokeAsync("recvRequestBill", new object[] {
                        linkCd,
                        frnNo,
                        userid,
                        passwd}, this.recvRequestBillOperationCompleted, userState);
        }
        
        private void OnrecvRequestBillOperationCompleted(object arg) {
            if ((this.recvRequestBillCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.recvRequestBillCompleted(this, new recvRequestBillCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="https://ws.nicedata.co.kr/services/DTIService", ResponseNamespace="https://ws.nicedata.co.kr/services/DTIService")]
        public void recvConfirm(string linkCd, string frnNo, string userid, string passwd, string billNo, string status, out string retVal, out string errMsg) {
            object[] results = this.Invoke("recvConfirm", new object[] {
                        linkCd,
                        frnNo,
                        userid,
                        passwd,
                        billNo,
                        status});
            retVal = ((string)(results[0]));
            errMsg = ((string)(results[1]));
        }
        
        /// <remarks/>
        public void recvConfirmAsync(string linkCd, string frnNo, string userid, string passwd, string billNo, string status) {
            this.recvConfirmAsync(linkCd, frnNo, userid, passwd, billNo, status, null);
        }
        
        /// <remarks/>
        public void recvConfirmAsync(string linkCd, string frnNo, string userid, string passwd, string billNo, string status, object userState) {
            if ((this.recvConfirmOperationCompleted == null)) {
                this.recvConfirmOperationCompleted = new System.Threading.SendOrPostCallback(this.OnrecvConfirmOperationCompleted);
            }
            this.InvokeAsync("recvConfirm", new object[] {
                        linkCd,
                        frnNo,
                        userid,
                        passwd,
                        billNo,
                        status}, this.recvConfirmOperationCompleted, userState);
        }
        
        private void OnrecvConfirmOperationCompleted(object arg) {
            if ((this.recvConfirmCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.recvConfirmCompleted(this, new recvConfirmCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="https://ws.nicedata.co.kr/services/DTIService", ResponseNamespace="https://ws.nicedata.co.kr/services/DTIService")]
        public void recvConfirmBill(string linkCd, string frnNo, string userid, string passwd, string billNo, string status, out string retVal, out string errMsg) {
            object[] results = this.Invoke("recvConfirmBill", new object[] {
                        linkCd,
                        frnNo,
                        userid,
                        passwd,
                        billNo,
                        status});
            retVal = ((string)(results[0]));
            errMsg = ((string)(results[1]));
        }
        
        /// <remarks/>
        public void recvConfirmBillAsync(string linkCd, string frnNo, string userid, string passwd, string billNo, string status) {
            this.recvConfirmBillAsync(linkCd, frnNo, userid, passwd, billNo, status, null);
        }
        
        /// <remarks/>
        public void recvConfirmBillAsync(string linkCd, string frnNo, string userid, string passwd, string billNo, string status, object userState) {
            if ((this.recvConfirmBillOperationCompleted == null)) {
                this.recvConfirmBillOperationCompleted = new System.Threading.SendOrPostCallback(this.OnrecvConfirmBillOperationCompleted);
            }
            this.InvokeAsync("recvConfirmBill", new object[] {
                        linkCd,
                        frnNo,
                        userid,
                        passwd,
                        billNo,
                        status}, this.recvConfirmBillOperationCompleted, userState);
        }
        
        private void OnrecvConfirmBillOperationCompleted(object arg) {
            if ((this.recvConfirmBillCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.recvConfirmBillCompleted(this, new recvConfirmBillCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="https://ws.nicedata.co.kr/services/DTIService", ResponseNamespace="https://ws.nicedata.co.kr/services/DTIService")]
        public void changeStatus(string linkCd, string frnNo, string userid, string passwd, string billNo, string status, out string retVal, out string errMsg) {
            object[] results = this.Invoke("changeStatus", new object[] {
                        linkCd,
                        frnNo,
                        userid,
                        passwd,
                        billNo,
                        status});
            retVal = ((string)(results[0]));
            errMsg = ((string)(results[1]));
        }
        
        /// <remarks/>
        public void changeStatusAsync(string linkCd, string frnNo, string userid, string passwd, string billNo, string status) {
            this.changeStatusAsync(linkCd, frnNo, userid, passwd, billNo, status, null);
        }
        
        /// <remarks/>
        public void changeStatusAsync(string linkCd, string frnNo, string userid, string passwd, string billNo, string status, object userState) {
            if ((this.changeStatusOperationCompleted == null)) {
                this.changeStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnchangeStatusOperationCompleted);
            }
            this.InvokeAsync("changeStatus", new object[] {
                        linkCd,
                        frnNo,
                        userid,
                        passwd,
                        billNo,
                        status}, this.changeStatusOperationCompleted, userState);
        }
        
        private void OnchangeStatusOperationCompleted(object arg) {
            if ((this.changeStatusCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.changeStatusCompleted(this, new changeStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="https://ws.nicedata.co.kr/services/DTIService", ResponseNamespace="https://ws.nicedata.co.kr/services/DTIService")]
        public void updateRequest(string linkCd, string frnNo, string userid, string passwd, out string retVal, out string errMsg, out string isChanged, out string billNo, out string changeCd, out string status, out string changeYmd, out string statusDesc) {
            object[] results = this.Invoke("updateRequest", new object[] {
                        linkCd,
                        frnNo,
                        userid,
                        passwd});
            retVal = ((string)(results[0]));
            errMsg = ((string)(results[1]));
            isChanged = ((string)(results[2]));
            billNo = ((string)(results[3]));
            changeCd = ((string)(results[4]));
            status = ((string)(results[5]));
            changeYmd = ((string)(results[6]));
            statusDesc = ((string)(results[7]));
        }
        
        /// <remarks/>
        public void updateRequestAsync(string linkCd, string frnNo, string userid, string passwd) {
            this.updateRequestAsync(linkCd, frnNo, userid, passwd, null);
        }
        
        /// <remarks/>
        public void updateRequestAsync(string linkCd, string frnNo, string userid, string passwd, object userState) {
            if ((this.updateRequestOperationCompleted == null)) {
                this.updateRequestOperationCompleted = new System.Threading.SendOrPostCallback(this.OnupdateRequestOperationCompleted);
            }
            this.InvokeAsync("updateRequest", new object[] {
                        linkCd,
                        frnNo,
                        userid,
                        passwd}, this.updateRequestOperationCompleted, userState);
        }
        
        private void OnupdateRequestOperationCompleted(object arg) {
            if ((this.updateRequestCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.updateRequestCompleted(this, new updateRequestCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="https://ws.nicedata.co.kr/services/DTIService", ResponseNamespace="https://ws.nicedata.co.kr/services/DTIService")]
        public void updateRequestBill(string linkCd, string frnNo, string userid, string passwd, out string retVal, out string errMsg, out string isChanged, out string billNo, out string changeCd, out string status, out string changeYmd, out string statusDesc) {
            object[] results = this.Invoke("updateRequestBill", new object[] {
                        linkCd,
                        frnNo,
                        userid,
                        passwd});
            retVal = ((string)(results[0]));
            errMsg = ((string)(results[1]));
            isChanged = ((string)(results[2]));
            billNo = ((string)(results[3]));
            changeCd = ((string)(results[4]));
            status = ((string)(results[5]));
            changeYmd = ((string)(results[6]));
            statusDesc = ((string)(results[7]));
        }
        
        /// <remarks/>
        public void updateRequestBillAsync(string linkCd, string frnNo, string userid, string passwd) {
            this.updateRequestBillAsync(linkCd, frnNo, userid, passwd, null);
        }
        
        /// <remarks/>
        public void updateRequestBillAsync(string linkCd, string frnNo, string userid, string passwd, object userState) {
            if ((this.updateRequestBillOperationCompleted == null)) {
                this.updateRequestBillOperationCompleted = new System.Threading.SendOrPostCallback(this.OnupdateRequestBillOperationCompleted);
            }
            this.InvokeAsync("updateRequestBill", new object[] {
                        linkCd,
                        frnNo,
                        userid,
                        passwd}, this.updateRequestBillOperationCompleted, userState);
        }
        
        private void OnupdateRequestBillOperationCompleted(object arg) {
            if ((this.updateRequestBillCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.updateRequestBillCompleted(this, new updateRequestBillCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="https://ws.nicedata.co.kr/services/DTIService", ResponseNamespace="https://ws.nicedata.co.kr/services/DTIService")]
        public void updateRequestBatch(string linkCd, string frnNo, string userid, string passwd, string issue_list, out string retVal, out string errMsg, out string resultXml) {
            object[] results = this.Invoke("updateRequestBatch", new object[] {
                        linkCd,
                        frnNo,
                        userid,
                        passwd,
                        issue_list});
            retVal = ((string)(results[0]));
            errMsg = ((string)(results[1]));
            resultXml = ((string)(results[2]));
        }
        
        /// <remarks/>
        public void updateRequestBatchAsync(string linkCd, string frnNo, string userid, string passwd, string issue_list) {
            this.updateRequestBatchAsync(linkCd, frnNo, userid, passwd, issue_list, null);
        }
        
        /// <remarks/>
        public void updateRequestBatchAsync(string linkCd, string frnNo, string userid, string passwd, string issue_list, object userState) {
            if ((this.updateRequestBatchOperationCompleted == null)) {
                this.updateRequestBatchOperationCompleted = new System.Threading.SendOrPostCallback(this.OnupdateRequestBatchOperationCompleted);
            }
            this.InvokeAsync("updateRequestBatch", new object[] {
                        linkCd,
                        frnNo,
                        userid,
                        passwd,
                        issue_list}, this.updateRequestBatchOperationCompleted, userState);
        }
        
        private void OnupdateRequestBatchOperationCompleted(object arg) {
            if ((this.updateRequestBatchCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.updateRequestBatchCompleted(this, new updateRequestBatchCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="https://ws.nicedata.co.kr/services/DTIService", ResponseNamespace="https://ws.nicedata.co.kr/services/DTIService")]
        public void updateConfirm(string linkCd, string frnNo, string userid, string passwd, string billNo, string changeCd, string status, out string retVal, out string errMsg) {
            object[] results = this.Invoke("updateConfirm", new object[] {
                        linkCd,
                        frnNo,
                        userid,
                        passwd,
                        billNo,
                        changeCd,
                        status});
            retVal = ((string)(results[0]));
            errMsg = ((string)(results[1]));
        }
        
        /// <remarks/>
        public void updateConfirmAsync(string linkCd, string frnNo, string userid, string passwd, string billNo, string changeCd, string status) {
            this.updateConfirmAsync(linkCd, frnNo, userid, passwd, billNo, changeCd, status, null);
        }
        
        /// <remarks/>
        public void updateConfirmAsync(string linkCd, string frnNo, string userid, string passwd, string billNo, string changeCd, string status, object userState) {
            if ((this.updateConfirmOperationCompleted == null)) {
                this.updateConfirmOperationCompleted = new System.Threading.SendOrPostCallback(this.OnupdateConfirmOperationCompleted);
            }
            this.InvokeAsync("updateConfirm", new object[] {
                        linkCd,
                        frnNo,
                        userid,
                        passwd,
                        billNo,
                        changeCd,
                        status}, this.updateConfirmOperationCompleted, userState);
        }
        
        private void OnupdateConfirmOperationCompleted(object arg) {
            if ((this.updateConfirmCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.updateConfirmCompleted(this, new updateConfirmCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="https://ws.nicedata.co.kr/services/DTIService", ResponseNamespace="https://ws.nicedata.co.kr/services/DTIService")]
        public void updateConfirmBill(string linkCd, string frnNo, string userid, string passwd, string billNo, string changeCd, string status, out string retVal, out string errMsg) {
            object[] results = this.Invoke("updateConfirmBill", new object[] {
                        linkCd,
                        frnNo,
                        userid,
                        passwd,
                        billNo,
                        changeCd,
                        status});
            retVal = ((string)(results[0]));
            errMsg = ((string)(results[1]));
        }
        
        /// <remarks/>
        public void updateConfirmBillAsync(string linkCd, string frnNo, string userid, string passwd, string billNo, string changeCd, string status) {
            this.updateConfirmBillAsync(linkCd, frnNo, userid, passwd, billNo, changeCd, status, null);
        }
        
        /// <remarks/>
        public void updateConfirmBillAsync(string linkCd, string frnNo, string userid, string passwd, string billNo, string changeCd, string status, object userState) {
            if ((this.updateConfirmBillOperationCompleted == null)) {
                this.updateConfirmBillOperationCompleted = new System.Threading.SendOrPostCallback(this.OnupdateConfirmBillOperationCompleted);
            }
            this.InvokeAsync("updateConfirmBill", new object[] {
                        linkCd,
                        frnNo,
                        userid,
                        passwd,
                        billNo,
                        changeCd,
                        status}, this.updateConfirmBillOperationCompleted, userState);
        }
        
        private void OnupdateConfirmBillOperationCompleted(object arg) {
            if ((this.updateConfirmBillCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.updateConfirmBillCompleted(this, new updateConfirmBillCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="https://ws.nicedata.co.kr/services/DTIService", ResponseNamespace="https://ws.nicedata.co.kr/services/DTIService")]
        public void updateConfirmBatch(string linkCd, string frnNo, string userid, string passwd, string resultXml, out string retVal, out string errMsg) {
            object[] results = this.Invoke("updateConfirmBatch", new object[] {
                        linkCd,
                        frnNo,
                        userid,
                        passwd,
                        resultXml});
            retVal = ((string)(results[0]));
            errMsg = ((string)(results[1]));
        }
        
        /// <remarks/>
        public void updateConfirmBatchAsync(string linkCd, string frnNo, string userid, string passwd, string resultXml) {
            this.updateConfirmBatchAsync(linkCd, frnNo, userid, passwd, resultXml, null);
        }
        
        /// <remarks/>
        public void updateConfirmBatchAsync(string linkCd, string frnNo, string userid, string passwd, string resultXml, object userState) {
            if ((this.updateConfirmBatchOperationCompleted == null)) {
                this.updateConfirmBatchOperationCompleted = new System.Threading.SendOrPostCallback(this.OnupdateConfirmBatchOperationCompleted);
            }
            this.InvokeAsync("updateConfirmBatch", new object[] {
                        linkCd,
                        frnNo,
                        userid,
                        passwd,
                        resultXml}, this.updateConfirmBatchOperationCompleted, userState);
        }
        
        private void OnupdateConfirmBatchOperationCompleted(object arg) {
            if ((this.updateConfirmBatchCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.updateConfirmBatchCompleted(this, new updateConfirmBatchCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="https://ws.nicedata.co.kr/services/DTIService", ResponseNamespace="https://ws.nicedata.co.kr/services/DTIService")]
        public void sendMultiMail(string linkCd, string frnNo, string userid, string passwd, string billNos, out string retVal, out string errMsg) {
            object[] results = this.Invoke("sendMultiMail", new object[] {
                        linkCd,
                        frnNo,
                        userid,
                        passwd,
                        billNos});
            retVal = ((string)(results[0]));
            errMsg = ((string)(results[1]));
        }
        
        /// <remarks/>
        public void sendMultiMailAsync(string linkCd, string frnNo, string userid, string passwd, string billNos) {
            this.sendMultiMailAsync(linkCd, frnNo, userid, passwd, billNos, null);
        }
        
        /// <remarks/>
        public void sendMultiMailAsync(string linkCd, string frnNo, string userid, string passwd, string billNos, object userState) {
            if ((this.sendMultiMailOperationCompleted == null)) {
                this.sendMultiMailOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsendMultiMailOperationCompleted);
            }
            this.InvokeAsync("sendMultiMail", new object[] {
                        linkCd,
                        frnNo,
                        userid,
                        passwd,
                        billNos}, this.sendMultiMailOperationCompleted, userState);
        }
        
        private void OnsendMultiMailOperationCompleted(object arg) {
            if ((this.sendMultiMailCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.sendMultiMailCompleted(this, new sendMultiMailCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="https://ws.nicedata.co.kr/services/DTIService", ResponseNamespace="https://ws.nicedata.co.kr/services/DTIService")]
        public void sendMultiMail2(string linkCd, string frnNo, string userid, string passwd, string billNos, string emails, out string retVal, out string errMsg) {
            object[] results = this.Invoke("sendMultiMail2", new object[] {
                        linkCd,
                        frnNo,
                        userid,
                        passwd,
                        billNos,
                        emails});
            retVal = ((string)(results[0]));
            errMsg = ((string)(results[1]));
        }
        
        /// <remarks/>
        public void sendMultiMail2Async(string linkCd, string frnNo, string userid, string passwd, string billNos, string emails) {
            this.sendMultiMail2Async(linkCd, frnNo, userid, passwd, billNos, emails, null);
        }
        
        /// <remarks/>
        public void sendMultiMail2Async(string linkCd, string frnNo, string userid, string passwd, string billNos, string emails, object userState) {
            if ((this.sendMultiMail2OperationCompleted == null)) {
                this.sendMultiMail2OperationCompleted = new System.Threading.SendOrPostCallback(this.OnsendMultiMail2OperationCompleted);
            }
            this.InvokeAsync("sendMultiMail2", new object[] {
                        linkCd,
                        frnNo,
                        userid,
                        passwd,
                        billNos,
                        emails}, this.sendMultiMail2OperationCompleted, userState);
        }
        
        private void OnsendMultiMail2OperationCompleted(object arg) {
            if ((this.sendMultiMail2Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.sendMultiMail2Completed(this, new sendMultiMail2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="https://ws.nicedata.co.kr/services/DTIService", ResponseNamespace="https://ws.nicedata.co.kr/services/DTIService")]
        [return: System.Xml.Serialization.SoapElementAttribute("selectBillStatusReturn")]
        public string selectBillStatus(string linkCd, string frnNo, string userid, string passwd, string billNo, out string status, out string ntsStatus, out string ntsCode, out string retVal, out string errMsg) {
            object[] results = this.Invoke("selectBillStatus", new object[] {
                        linkCd,
                        frnNo,
                        userid,
                        passwd,
                        billNo});
            status = ((string)(results[1]));
            ntsStatus = ((string)(results[2]));
            ntsCode = ((string)(results[3]));
            retVal = ((string)(results[4]));
            errMsg = ((string)(results[5]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void selectBillStatusAsync(string linkCd, string frnNo, string userid, string passwd, string billNo) {
            this.selectBillStatusAsync(linkCd, frnNo, userid, passwd, billNo, null);
        }
        
        /// <remarks/>
        public void selectBillStatusAsync(string linkCd, string frnNo, string userid, string passwd, string billNo, object userState) {
            if ((this.selectBillStatusOperationCompleted == null)) {
                this.selectBillStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnselectBillStatusOperationCompleted);
            }
            this.InvokeAsync("selectBillStatus", new object[] {
                        linkCd,
                        frnNo,
                        userid,
                        passwd,
                        billNo}, this.selectBillStatusOperationCompleted, userState);
        }
        
        private void OnselectBillStatusOperationCompleted(object arg) {
            if ((this.selectBillStatusCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.selectBillStatusCompleted(this, new selectBillStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="https://ws.nicedata.co.kr/services/DTIService", ResponseNamespace="https://ws.nicedata.co.kr/services/DTIService")]
        [return: System.Xml.Serialization.SoapElementAttribute("selectExpireDtReturn")]
        public string selectExpireDt(string linkCd, string frnNo, string userid, string passwd, out string retVal, out string errMsg, out string regYn, out string expireDt) {
            object[] results = this.Invoke("selectExpireDt", new object[] {
                        linkCd,
                        frnNo,
                        userid,
                        passwd});
            retVal = ((string)(results[1]));
            errMsg = ((string)(results[2]));
            regYn = ((string)(results[3]));
            expireDt = ((string)(results[4]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void selectExpireDtAsync(string linkCd, string frnNo, string userid, string passwd) {
            this.selectExpireDtAsync(linkCd, frnNo, userid, passwd, null);
        }
        
        /// <remarks/>
        public void selectExpireDtAsync(string linkCd, string frnNo, string userid, string passwd, object userState) {
            if ((this.selectExpireDtOperationCompleted == null)) {
                this.selectExpireDtOperationCompleted = new System.Threading.SendOrPostCallback(this.OnselectExpireDtOperationCompleted);
            }
            this.InvokeAsync("selectExpireDt", new object[] {
                        linkCd,
                        frnNo,
                        userid,
                        passwd}, this.selectExpireDtOperationCompleted, userState);
        }
        
        private void OnselectExpireDtOperationCompleted(object arg) {
            if ((this.selectExpireDtCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.selectExpireDtCompleted(this, new selectExpireDtCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="https://ws.nicedata.co.kr/services/DTIService", ResponseNamespace="https://ws.nicedata.co.kr/services/DTIService")]
        [return: System.Xml.Serialization.SoapElementAttribute("selectPointReturn")]
        public string selectPoint(string linkCd, string frnNo, string userid, string passwd, out string retVal, out string errMsg, out string gnlPoint, out string bnsPoint, out string totPoint) {
            object[] results = this.Invoke("selectPoint", new object[] {
                        linkCd,
                        frnNo,
                        userid,
                        passwd});
            retVal = ((string)(results[1]));
            errMsg = ((string)(results[2]));
            gnlPoint = ((string)(results[3]));
            bnsPoint = ((string)(results[4]));
            totPoint = ((string)(results[5]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void selectPointAsync(string linkCd, string frnNo, string userid, string passwd) {
            this.selectPointAsync(linkCd, frnNo, userid, passwd, null);
        }
        
        /// <remarks/>
        public void selectPointAsync(string linkCd, string frnNo, string userid, string passwd, object userState) {
            if ((this.selectPointOperationCompleted == null)) {
                this.selectPointOperationCompleted = new System.Threading.SendOrPostCallback(this.OnselectPointOperationCompleted);
            }
            this.InvokeAsync("selectPoint", new object[] {
                        linkCd,
                        frnNo,
                        userid,
                        passwd}, this.selectPointOperationCompleted, userState);
        }
        
        private void OnselectPointOperationCompleted(object arg) {
            if ((this.selectPointCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.selectPointCompleted(this, new selectPointCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="https://ws.nicedata.co.kr/services/DTIService", ResponseNamespace="https://ws.nicedata.co.kr/services/DTIService")]
        [return: System.Xml.Serialization.SoapElementAttribute("getPKIPolicyReturn")]
        public string getPKIPolicy(out string retVal, out string errMsg, out string policy) {
            object[] results = this.Invoke("getPKIPolicy", new object[0]);
            retVal = ((string)(results[1]));
            errMsg = ((string)(results[2]));
            policy = ((string)(results[3]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getPKIPolicyAsync() {
            this.getPKIPolicyAsync(null);
        }
        
        /// <remarks/>
        public void getPKIPolicyAsync(object userState) {
            if ((this.getPKIPolicyOperationCompleted == null)) {
                this.getPKIPolicyOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetPKIPolicyOperationCompleted);
            }
            this.InvokeAsync("getPKIPolicy", new object[0], this.getPKIPolicyOperationCompleted, userState);
        }
        
        private void OngetPKIPolicyOperationCompleted(object arg) {
            if ((this.getPKIPolicyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getPKIPolicyCompleted(this, new getPKIPolicyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="https://ws.nicedata.co.kr/services/DTIService", ResponseNamespace="https://ws.nicedata.co.kr/services/DTIService")]
        [return: System.Xml.Serialization.SoapElementAttribute("getSecPasswdReturn")]
        public string getSecPasswd(string passwd, out string retVal, out string errMsg, out string secPasswd) {
            object[] results = this.Invoke("getSecPasswd", new object[] {
                        passwd});
            retVal = ((string)(results[1]));
            errMsg = ((string)(results[2]));
            secPasswd = ((string)(results[3]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getSecPasswdAsync(string passwd) {
            this.getSecPasswdAsync(passwd, null);
        }
        
        /// <remarks/>
        public void getSecPasswdAsync(string passwd, object userState) {
            if ((this.getSecPasswdOperationCompleted == null)) {
                this.getSecPasswdOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetSecPasswdOperationCompleted);
            }
            this.InvokeAsync("getSecPasswd", new object[] {
                        passwd}, this.getSecPasswdOperationCompleted, userState);
        }
        
        private void OngetSecPasswdOperationCompleted(object arg) {
            if ((this.getSecPasswdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getSecPasswdCompleted(this, new getSecPasswdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="https://ws.nicedata.co.kr/services/DTIService", ResponseNamespace="https://ws.nicedata.co.kr/services/DTIService")]
        public void initConnection(out string result) {
            object[] results = this.Invoke("initConnection", new object[0]);
            result = ((string)(results[0]));
        }
        
        /// <remarks/>
        public void initConnectionAsync() {
            this.initConnectionAsync(null);
        }
        
        /// <remarks/>
        public void initConnectionAsync(object userState) {
            if ((this.initConnectionOperationCompleted == null)) {
                this.initConnectionOperationCompleted = new System.Threading.SendOrPostCallback(this.OninitConnectionOperationCompleted);
            }
            this.InvokeAsync("initConnection", new object[0], this.initConnectionOperationCompleted, userState);
        }
        
        private void OninitConnectionOperationCompleted(object arg) {
            if ((this.initConnectionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.initConnectionCompleted(this, new initConnectionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="https://ws.nicedata.co.kr/services/DTIService", ResponseNamespace="https://ws.nicedata.co.kr/services/DTIService")]
        [return: System.Xml.Serialization.SoapElementAttribute("selectMembInfoJsonReturn")]
        public string selectMembInfoJson(string linkCd, string membId, string passwd, out string retVal, out string errMsg, out string data) {
            object[] results = this.Invoke("selectMembInfoJson", new object[] {
                        linkCd,
                        membId,
                        passwd});
            retVal = ((string)(results[1]));
            errMsg = ((string)(results[2]));
            data = ((string)(results[3]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void selectMembInfoJsonAsync(string linkCd, string membId, string passwd) {
            this.selectMembInfoJsonAsync(linkCd, membId, passwd, null);
        }
        
        /// <remarks/>
        public void selectMembInfoJsonAsync(string linkCd, string membId, string passwd, object userState) {
            if ((this.selectMembInfoJsonOperationCompleted == null)) {
                this.selectMembInfoJsonOperationCompleted = new System.Threading.SendOrPostCallback(this.OnselectMembInfoJsonOperationCompleted);
            }
            this.InvokeAsync("selectMembInfoJson", new object[] {
                        linkCd,
                        membId,
                        passwd}, this.selectMembInfoJsonOperationCompleted, userState);
        }
        
        private void OnselectMembInfoJsonOperationCompleted(object arg) {
            if ((this.selectMembInfoJsonCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.selectMembInfoJsonCompleted(this, new selectMembInfoJsonCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="https://ws.nicedata.co.kr/services/DTIService", ResponseNamespace="https://ws.nicedata.co.kr/services/DTIService")]
        [return: System.Xml.Serialization.SoapElementAttribute("getMembJoinInfReturn")]
        public string getMembJoinInf(string linkCd, string linkId, string bizNo, string rsbmName, string email, string hpNo, out string retVal, out string errMsg, out string frnNo, out string userid, out string passwd) {
            object[] results = this.Invoke("getMembJoinInf", new object[] {
                        linkCd,
                        linkId,
                        bizNo,
                        rsbmName,
                        email,
                        hpNo});
            retVal = ((string)(results[1]));
            errMsg = ((string)(results[2]));
            frnNo = ((string)(results[3]));
            userid = ((string)(results[4]));
            passwd = ((string)(results[5]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getMembJoinInfAsync(string linkCd, string linkId, string bizNo, string rsbmName, string email, string hpNo) {
            this.getMembJoinInfAsync(linkCd, linkId, bizNo, rsbmName, email, hpNo, null);
        }
        
        /// <remarks/>
        public void getMembJoinInfAsync(string linkCd, string linkId, string bizNo, string rsbmName, string email, string hpNo, object userState) {
            if ((this.getMembJoinInfOperationCompleted == null)) {
                this.getMembJoinInfOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetMembJoinInfOperationCompleted);
            }
            this.InvokeAsync("getMembJoinInf", new object[] {
                        linkCd,
                        linkId,
                        bizNo,
                        rsbmName,
                        email,
                        hpNo}, this.getMembJoinInfOperationCompleted, userState);
        }
        
        private void OngetMembJoinInfOperationCompleted(object arg) {
            if ((this.getMembJoinInfCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getMembJoinInfCompleted(this, new getMembJoinInfCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="https://ws.nicedata.co.kr/services/DTIService", ResponseNamespace="https://ws.nicedata.co.kr/services/DTIService")]
        public void changedStatusReqById(string linkCd, string frnNo, string userid, string passwd, string startYYYYMMDD, string endYYYYMMDD, out string retVal, out string errMsg, out string statusMsg) {
            object[] results = this.Invoke("changedStatusReqById", new object[] {
                        linkCd,
                        frnNo,
                        userid,
                        passwd,
                        startYYYYMMDD,
                        endYYYYMMDD});
            retVal = ((string)(results[0]));
            errMsg = ((string)(results[1]));
            statusMsg = ((string)(results[2]));
        }
        
        /// <remarks/>
        public void changedStatusReqByIdAsync(string linkCd, string frnNo, string userid, string passwd, string startYYYYMMDD, string endYYYYMMDD) {
            this.changedStatusReqByIdAsync(linkCd, frnNo, userid, passwd, startYYYYMMDD, endYYYYMMDD, null);
        }
        
        /// <remarks/>
        public void changedStatusReqByIdAsync(string linkCd, string frnNo, string userid, string passwd, string startYYYYMMDD, string endYYYYMMDD, object userState) {
            if ((this.changedStatusReqByIdOperationCompleted == null)) {
                this.changedStatusReqByIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnchangedStatusReqByIdOperationCompleted);
            }
            this.InvokeAsync("changedStatusReqById", new object[] {
                        linkCd,
                        frnNo,
                        userid,
                        passwd,
                        startYYYYMMDD,
                        endYYYYMMDD}, this.changedStatusReqByIdOperationCompleted, userState);
        }
        
        private void OnchangedStatusReqByIdOperationCompleted(object arg) {
            if ((this.changedStatusReqByIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.changedStatusReqByIdCompleted(this, new changedStatusReqByIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="https://ws.nicedata.co.kr/services/DTIService", ResponseNamespace="https://ws.nicedata.co.kr/services/DTIService")]
        public void changedStatusReqByLinkCd(string linkCd, string YYYYMMDD, out string retVal, out string errMsg, out string statusMsg) {
            object[] results = this.Invoke("changedStatusReqByLinkCd", new object[] {
                        linkCd,
                        YYYYMMDD});
            retVal = ((string)(results[0]));
            errMsg = ((string)(results[1]));
            statusMsg = ((string)(results[2]));
        }
        
        /// <remarks/>
        public void changedStatusReqByLinkCdAsync(string linkCd, string YYYYMMDD) {
            this.changedStatusReqByLinkCdAsync(linkCd, YYYYMMDD, null);
        }
        
        /// <remarks/>
        public void changedStatusReqByLinkCdAsync(string linkCd, string YYYYMMDD, object userState) {
            if ((this.changedStatusReqByLinkCdOperationCompleted == null)) {
                this.changedStatusReqByLinkCdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnchangedStatusReqByLinkCdOperationCompleted);
            }
            this.InvokeAsync("changedStatusReqByLinkCd", new object[] {
                        linkCd,
                        YYYYMMDD}, this.changedStatusReqByLinkCdOperationCompleted, userState);
        }
        
        private void OnchangedStatusReqByLinkCdOperationCompleted(object arg) {
            if ((this.changedStatusReqByLinkCdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.changedStatusReqByLinkCdCompleted(this, new changedStatusReqByLinkCdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="https://ws.nicedata.co.kr/services/DTIService", ResponseNamespace="https://ws.nicedata.co.kr/services/DTIService")]
        public void changedStatusResByLinkCd(string linkCd, string statusMsg, out string retVal, out string errMsg) {
            object[] results = this.Invoke("changedStatusResByLinkCd", new object[] {
                        linkCd,
                        statusMsg});
            retVal = ((string)(results[0]));
            errMsg = ((string)(results[1]));
        }
        
        /// <remarks/>
        public void changedStatusResByLinkCdAsync(string linkCd, string statusMsg) {
            this.changedStatusResByLinkCdAsync(linkCd, statusMsg, null);
        }
        
        /// <remarks/>
        public void changedStatusResByLinkCdAsync(string linkCd, string statusMsg, object userState) {
            if ((this.changedStatusResByLinkCdOperationCompleted == null)) {
                this.changedStatusResByLinkCdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnchangedStatusResByLinkCdOperationCompleted);
            }
            this.InvokeAsync("changedStatusResByLinkCd", new object[] {
                        linkCd,
                        statusMsg}, this.changedStatusResByLinkCdOperationCompleted, userState);
        }
        
        private void OnchangedStatusResByLinkCdOperationCompleted(object arg) {
            if ((this.changedStatusResByLinkCdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.changedStatusResByLinkCdCompleted(this, new changedStatusResByLinkCdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="https://ws.nicedata.co.kr/services/DTIService", ResponseNamespace="https://ws.nicedata.co.kr/services/DTIService")]
        public void makeAndPublishSignDelay(
                    string linkCd, 
                    string frnNo, 
                    string userid, 
                    string passwd, 
                    string certPw, 
                    string dtiXml, 
                    string sendMailYn, 
                    string sendSmsYn, 
                    string sendSmsMsg, 
                    string delayHour, 
                    out string retVal, 
                    out string errMsg, 
                    out string billNo, 
                    out string gnlPoint, 
                    out string bnsPoint, 
                    out string totPoint) {
            object[] results = this.Invoke("makeAndPublishSignDelay", new object[] {
                        linkCd,
                        frnNo,
                        userid,
                        passwd,
                        certPw,
                        dtiXml,
                        sendMailYn,
                        sendSmsYn,
                        sendSmsMsg,
                        delayHour});
            retVal = ((string)(results[0]));
            errMsg = ((string)(results[1]));
            billNo = ((string)(results[2]));
            gnlPoint = ((string)(results[3]));
            bnsPoint = ((string)(results[4]));
            totPoint = ((string)(results[5]));
        }
        
        /// <remarks/>
        public void makeAndPublishSignDelayAsync(string linkCd, string frnNo, string userid, string passwd, string certPw, string dtiXml, string sendMailYn, string sendSmsYn, string sendSmsMsg, string delayHour) {
            this.makeAndPublishSignDelayAsync(linkCd, frnNo, userid, passwd, certPw, dtiXml, sendMailYn, sendSmsYn, sendSmsMsg, delayHour, null);
        }
        
        /// <remarks/>
        public void makeAndPublishSignDelayAsync(string linkCd, string frnNo, string userid, string passwd, string certPw, string dtiXml, string sendMailYn, string sendSmsYn, string sendSmsMsg, string delayHour, object userState) {
            if ((this.makeAndPublishSignDelayOperationCompleted == null)) {
                this.makeAndPublishSignDelayOperationCompleted = new System.Threading.SendOrPostCallback(this.OnmakeAndPublishSignDelayOperationCompleted);
            }
            this.InvokeAsync("makeAndPublishSignDelay", new object[] {
                        linkCd,
                        frnNo,
                        userid,
                        passwd,
                        certPw,
                        dtiXml,
                        sendMailYn,
                        sendSmsYn,
                        sendSmsMsg,
                        delayHour}, this.makeAndPublishSignDelayOperationCompleted, userState);
        }
        
        private void OnmakeAndPublishSignDelayOperationCompleted(object arg) {
            if ((this.makeAndPublishSignDelayCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.makeAndPublishSignDelayCompleted(this, new makeAndPublishSignDelayCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="https://ws.nicedata.co.kr/services/DTIService", ResponseNamespace="https://ws.nicedata.co.kr/services/DTIService")]
        public void updateEtaxStatusToZ(string linkCd, string frnNo, string userid, string passwd, string apprNo, out string retVal, out string errMsg) {
            object[] results = this.Invoke("updateEtaxStatusToZ", new object[] {
                        linkCd,
                        frnNo,
                        userid,
                        passwd,
                        apprNo});
            retVal = ((string)(results[0]));
            errMsg = ((string)(results[1]));
        }
        
        /// <remarks/>
        public void updateEtaxStatusToZAsync(string linkCd, string frnNo, string userid, string passwd, string apprNo) {
            this.updateEtaxStatusToZAsync(linkCd, frnNo, userid, passwd, apprNo, null);
        }
        
        /// <remarks/>
        public void updateEtaxStatusToZAsync(string linkCd, string frnNo, string userid, string passwd, string apprNo, object userState) {
            if ((this.updateEtaxStatusToZOperationCompleted == null)) {
                this.updateEtaxStatusToZOperationCompleted = new System.Threading.SendOrPostCallback(this.OnupdateEtaxStatusToZOperationCompleted);
            }
            this.InvokeAsync("updateEtaxStatusToZ", new object[] {
                        linkCd,
                        frnNo,
                        userid,
                        passwd,
                        apprNo}, this.updateEtaxStatusToZOperationCompleted, userState);
        }
        
        private void OnupdateEtaxStatusToZOperationCompleted(object arg) {
            if ((this.updateEtaxStatusToZCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.updateEtaxStatusToZCompleted(this, new updateEtaxStatusToZCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="https://ws.nicedata.co.kr/services/DTIService", ResponseNamespace="https://ws.nicedata.co.kr/services/DTIService")]
        public void makeSpecTran(string linkCd, string frnNo, string userid, string passwd, string data, out string retVal, out string errMsg, out string tid, out string gnlPoint, out string bnsPoint, out string totPoint) {
            object[] results = this.Invoke("makeSpecTran", new object[] {
                        linkCd,
                        frnNo,
                        userid,
                        passwd,
                        data});
            retVal = ((string)(results[0]));
            errMsg = ((string)(results[1]));
            tid = ((string)(results[2]));
            gnlPoint = ((string)(results[3]));
            bnsPoint = ((string)(results[4]));
            totPoint = ((string)(results[5]));
        }
        
        /// <remarks/>
        public void makeSpecTranAsync(string linkCd, string frnNo, string userid, string passwd, string data) {
            this.makeSpecTranAsync(linkCd, frnNo, userid, passwd, data, null);
        }
        
        /// <remarks/>
        public void makeSpecTranAsync(string linkCd, string frnNo, string userid, string passwd, string data, object userState) {
            if ((this.makeSpecTranOperationCompleted == null)) {
                this.makeSpecTranOperationCompleted = new System.Threading.SendOrPostCallback(this.OnmakeSpecTranOperationCompleted);
            }
            this.InvokeAsync("makeSpecTran", new object[] {
                        linkCd,
                        frnNo,
                        userid,
                        passwd,
                        data}, this.makeSpecTranOperationCompleted, userState);
        }
        
        private void OnmakeSpecTranOperationCompleted(object arg) {
            if ((this.makeSpecTranCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.makeSpecTranCompleted(this, new makeSpecTranCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="https://ws.nicedata.co.kr/services/DTIService", ResponseNamespace="https://ws.nicedata.co.kr/services/DTIService")]
        public void sendSpecTranMail(string linkCd, string frnNo, string userid, string passwd, string tid, string recpMail, out string retVal, out string errMsg) {
            object[] results = this.Invoke("sendSpecTranMail", new object[] {
                        linkCd,
                        frnNo,
                        userid,
                        passwd,
                        tid,
                        recpMail});
            retVal = ((string)(results[0]));
            errMsg = ((string)(results[1]));
        }
        
        /// <remarks/>
        public void sendSpecTranMailAsync(string linkCd, string frnNo, string userid, string passwd, string tid, string recpMail) {
            this.sendSpecTranMailAsync(linkCd, frnNo, userid, passwd, tid, recpMail, null);
        }
        
        /// <remarks/>
        public void sendSpecTranMailAsync(string linkCd, string frnNo, string userid, string passwd, string tid, string recpMail, object userState) {
            if ((this.sendSpecTranMailOperationCompleted == null)) {
                this.sendSpecTranMailOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsendSpecTranMailOperationCompleted);
            }
            this.InvokeAsync("sendSpecTranMail", new object[] {
                        linkCd,
                        frnNo,
                        userid,
                        passwd,
                        tid,
                        recpMail}, this.sendSpecTranMailOperationCompleted, userState);
        }
        
        private void OnsendSpecTranMailOperationCompleted(object arg) {
            if ((this.sendSpecTranMailCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.sendSpecTranMailCompleted(this, new sendSpecTranMailCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="https://ws.nicedata.co.kr/services/DTIService", ResponseNamespace="https://ws.nicedata.co.kr/services/DTIService")]
        public void sendEtaxFax(string linkCd, string frnNo, string userid, string passwd, string faxNo, string fileName, string b64FileData, out string retVal, out string errMsg, out string gnlPoint, out string bnsPoint, out string totPoint) {
            object[] results = this.Invoke("sendEtaxFax", new object[] {
                        linkCd,
                        frnNo,
                        userid,
                        passwd,
                        faxNo,
                        fileName,
                        b64FileData});
            retVal = ((string)(results[0]));
            errMsg = ((string)(results[1]));
            gnlPoint = ((string)(results[2]));
            bnsPoint = ((string)(results[3]));
            totPoint = ((string)(results[4]));
        }
        
        /// <remarks/>
        public void sendEtaxFaxAsync(string linkCd, string frnNo, string userid, string passwd, string faxNo, string fileName, string b64FileData) {
            this.sendEtaxFaxAsync(linkCd, frnNo, userid, passwd, faxNo, fileName, b64FileData, null);
        }
        
        /// <remarks/>
        public void sendEtaxFaxAsync(string linkCd, string frnNo, string userid, string passwd, string faxNo, string fileName, string b64FileData, object userState) {
            if ((this.sendEtaxFaxOperationCompleted == null)) {
                this.sendEtaxFaxOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsendEtaxFaxOperationCompleted);
            }
            this.InvokeAsync("sendEtaxFax", new object[] {
                        linkCd,
                        frnNo,
                        userid,
                        passwd,
                        faxNo,
                        fileName,
                        b64FileData}, this.sendEtaxFaxOperationCompleted, userState);
        }
        
        private void OnsendEtaxFaxOperationCompleted(object arg) {
            if ((this.sendEtaxFaxCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.sendEtaxFaxCompleted(this, new sendEtaxFaxCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://legacy.dti.ws.nds", ResponseNamespace="https://ws.nicedata.co.kr/services/DTIService")]
        [return: System.Xml.Serialization.SoapElementAttribute("retryPeriodStatusNewReturn")]
        public string retryPeriodStatusNew(string linkCd, string frnNo, string userId, string passwd, string startYYYYMMDD, string endYYYYMMDD, string columnSize, string retVal, string errMsg, [System.Xml.Serialization.SoapElementAttribute("retVal")] out string retVal1, [System.Xml.Serialization.SoapElementAttribute("errMsg")] out string errMsg1) {
            object[] results = this.Invoke("retryPeriodStatusNew", new object[] {
                        linkCd,
                        frnNo,
                        userId,
                        passwd,
                        startYYYYMMDD,
                        endYYYYMMDD,
                        columnSize,
                        retVal,
                        errMsg});
            retVal1 = ((string)(results[1]));
            errMsg1 = ((string)(results[2]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void retryPeriodStatusNewAsync(string linkCd, string frnNo, string userId, string passwd, string startYYYYMMDD, string endYYYYMMDD, string columnSize, string retVal, string errMsg) {
            this.retryPeriodStatusNewAsync(linkCd, frnNo, userId, passwd, startYYYYMMDD, endYYYYMMDD, columnSize, retVal, errMsg, null);
        }
        
        /// <remarks/>
        public void retryPeriodStatusNewAsync(string linkCd, string frnNo, string userId, string passwd, string startYYYYMMDD, string endYYYYMMDD, string columnSize, string retVal, string errMsg, object userState) {
            if ((this.retryPeriodStatusNewOperationCompleted == null)) {
                this.retryPeriodStatusNewOperationCompleted = new System.Threading.SendOrPostCallback(this.OnretryPeriodStatusNewOperationCompleted);
            }
            this.InvokeAsync("retryPeriodStatusNew", new object[] {
                        linkCd,
                        frnNo,
                        userId,
                        passwd,
                        startYYYYMMDD,
                        endYYYYMMDD,
                        columnSize,
                        retVal,
                        errMsg}, this.retryPeriodStatusNewOperationCompleted, userState);
        }
        
        private void OnretryPeriodStatusNewOperationCompleted(object arg) {
            if ((this.retryPeriodStatusNewCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.retryPeriodStatusNewCompleted(this, new retryPeriodStatusNewCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://legacy.dti.ws.nds", ResponseNamespace="https://ws.nicedata.co.kr/services/DTIService")]
        [return: System.Xml.Serialization.SoapElementAttribute("retryPeriodStatusNewBillReturn")]
        public string retryPeriodStatusNewBill(string linkCd, string frnNo, string userId, string passwd, string startYYYYMMDD, string endYYYYMMDD, string columnSize, string retVal, string errMsg, [System.Xml.Serialization.SoapElementAttribute("retVal")] out string retVal1, [System.Xml.Serialization.SoapElementAttribute("errMsg")] out string errMsg1) {
            object[] results = this.Invoke("retryPeriodStatusNewBill", new object[] {
                        linkCd,
                        frnNo,
                        userId,
                        passwd,
                        startYYYYMMDD,
                        endYYYYMMDD,
                        columnSize,
                        retVal,
                        errMsg});
            retVal1 = ((string)(results[1]));
            errMsg1 = ((string)(results[2]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void retryPeriodStatusNewBillAsync(string linkCd, string frnNo, string userId, string passwd, string startYYYYMMDD, string endYYYYMMDD, string columnSize, string retVal, string errMsg) {
            this.retryPeriodStatusNewBillAsync(linkCd, frnNo, userId, passwd, startYYYYMMDD, endYYYYMMDD, columnSize, retVal, errMsg, null);
        }
        
        /// <remarks/>
        public void retryPeriodStatusNewBillAsync(string linkCd, string frnNo, string userId, string passwd, string startYYYYMMDD, string endYYYYMMDD, string columnSize, string retVal, string errMsg, object userState) {
            if ((this.retryPeriodStatusNewBillOperationCompleted == null)) {
                this.retryPeriodStatusNewBillOperationCompleted = new System.Threading.SendOrPostCallback(this.OnretryPeriodStatusNewBillOperationCompleted);
            }
            this.InvokeAsync("retryPeriodStatusNewBill", new object[] {
                        linkCd,
                        frnNo,
                        userId,
                        passwd,
                        startYYYYMMDD,
                        endYYYYMMDD,
                        columnSize,
                        retVal,
                        errMsg}, this.retryPeriodStatusNewBillOperationCompleted, userState);
        }
        
        private void OnretryPeriodStatusNewBillOperationCompleted(object arg) {
            if ((this.retryPeriodStatusNewBillCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.retryPeriodStatusNewBillCompleted(this, new retryPeriodStatusNewBillCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void selectTxtnClsCompletedEventHandler(object sender, selectTxtnClsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class selectTxtnClsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal selectTxtnClsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string retVal {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string errMsg {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string taxType {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public string closeYmd {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[3]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void changedStatusReqCompletedEventHandler(object sender, changedStatusReqCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class changedStatusReqCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal changedStatusReqCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string retVal {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string errMsg {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string statusMsg {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void changedStatusResCompletedEventHandler(object sender, changedStatusResCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class changedStatusResCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal changedStatusResCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string retVal {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string errMsg {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void membJoinCompletedEventHandler(object sender, membJoinCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class membJoinCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal membJoinCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string retVal {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string errMsg {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public string frnNo {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[3]));
            }
        }
        
        /// <remarks/>
        public string userid {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[4]));
            }
        }
        
        /// <remarks/>
        public string passwd {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[5]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void updateMembInfoCompletedEventHandler(object sender, updateMembInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class updateMembInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal updateMembInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string retVal {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string errMsg {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void selectMembInfoCompletedEventHandler(object sender, selectMembInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class selectMembInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal selectMembInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string retVal {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string errMsg {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public string bizNo {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[3]));
            }
        }
        
        /// <remarks/>
        public string custName {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[4]));
            }
        }
        
        /// <remarks/>
        public string ownerName {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[5]));
            }
        }
        
        /// <remarks/>
        public string bizCond {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[6]));
            }
        }
        
        /// <remarks/>
        public string bizItem {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[7]));
            }
        }
        
        /// <remarks/>
        public string rsbmName {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[8]));
            }
        }
        
        /// <remarks/>
        public string email {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[9]));
            }
        }
        
        /// <remarks/>
        public string telNo {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[10]));
            }
        }
        
        /// <remarks/>
        public string hpNo {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[11]));
            }
        }
        
        /// <remarks/>
        public string zipCode {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[12]));
            }
        }
        
        /// <remarks/>
        public string addr1 {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[13]));
            }
        }
        
        /// <remarks/>
        public string addr2 {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[14]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void makeAndPublishSignCompletedEventHandler(object sender, makeAndPublishSignCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class makeAndPublishSignCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal makeAndPublishSignCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string retVal {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string errMsg {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string billNo {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public string gnlPoint {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[3]));
            }
        }
        
        /// <remarks/>
        public string bnsPoint {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[4]));
            }
        }
        
        /// <remarks/>
        public string totPoint {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[5]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void updateCertCompletedEventHandler(object sender, updateCertCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class updateCertCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal updateCertCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string retVal {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string errMsg {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void makeDTICompletedEventHandler(object sender, makeDTICompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class makeDTICompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal makeDTICompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string retVal {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string errMsg {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string digest {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public string point {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[3]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void makeDTIWithFileCompletedEventHandler(object sender, makeDTIWithFileCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class makeDTIWithFileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal makeDTIWithFileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string retVal {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string errMsg {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string digest {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public string point {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[3]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void publishDTICompletedEventHandler(object sender, publishDTICompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class publishDTICompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal publishDTICompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string retVal {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string errMsg {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void makeAndPublishCompletedEventHandler(object sender, makeAndPublishCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class makeAndPublishCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal makeAndPublishCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string retVal {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string errMsg {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void makeAndPublishWithFileCompletedEventHandler(object sender, makeAndPublishWithFileCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class makeAndPublishWithFileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal makeAndPublishWithFileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string retVal {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string errMsg {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void makePublishSAPCompletedEventHandler(object sender, makePublishSAPCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class makePublishSAPCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal makePublishSAPCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string retVal {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string errMsg {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void retryPeriodStatusCompletedEventHandler(object sender, retryPeriodStatusCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class retryPeriodStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal retryPeriodStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string retVal {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string errMsg {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void recvRequestCompletedEventHandler(object sender, recvRequestCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class recvRequestCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal recvRequestCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string retVal {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string errMsg {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string recvYn {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public string billNo {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[3]));
            }
        }
        
        /// <remarks/>
        public string status {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[4]));
            }
        }
        
        /// <remarks/>
        public string DTIXml {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[5]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void recvRequestBillCompletedEventHandler(object sender, recvRequestBillCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class recvRequestBillCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal recvRequestBillCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string retVal {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string errMsg {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string recvYn {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public string billNo {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[3]));
            }
        }
        
        /// <remarks/>
        public string status {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[4]));
            }
        }
        
        /// <remarks/>
        public string DTIXml {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[5]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void recvConfirmCompletedEventHandler(object sender, recvConfirmCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class recvConfirmCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal recvConfirmCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string retVal {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string errMsg {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void recvConfirmBillCompletedEventHandler(object sender, recvConfirmBillCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class recvConfirmBillCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal recvConfirmBillCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string retVal {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string errMsg {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void changeStatusCompletedEventHandler(object sender, changeStatusCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class changeStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal changeStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string retVal {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string errMsg {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void updateRequestCompletedEventHandler(object sender, updateRequestCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class updateRequestCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal updateRequestCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string retVal {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string errMsg {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string isChanged {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public string billNo {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[3]));
            }
        }
        
        /// <remarks/>
        public string changeCd {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[4]));
            }
        }
        
        /// <remarks/>
        public string status {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[5]));
            }
        }
        
        /// <remarks/>
        public string changeYmd {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[6]));
            }
        }
        
        /// <remarks/>
        public string statusDesc {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[7]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void updateRequestBillCompletedEventHandler(object sender, updateRequestBillCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class updateRequestBillCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal updateRequestBillCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string retVal {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string errMsg {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string isChanged {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public string billNo {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[3]));
            }
        }
        
        /// <remarks/>
        public string changeCd {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[4]));
            }
        }
        
        /// <remarks/>
        public string status {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[5]));
            }
        }
        
        /// <remarks/>
        public string changeYmd {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[6]));
            }
        }
        
        /// <remarks/>
        public string statusDesc {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[7]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void updateRequestBatchCompletedEventHandler(object sender, updateRequestBatchCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class updateRequestBatchCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal updateRequestBatchCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string retVal {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string errMsg {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string resultXml {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void updateConfirmCompletedEventHandler(object sender, updateConfirmCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class updateConfirmCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal updateConfirmCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string retVal {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string errMsg {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void updateConfirmBillCompletedEventHandler(object sender, updateConfirmBillCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class updateConfirmBillCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal updateConfirmBillCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string retVal {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string errMsg {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void updateConfirmBatchCompletedEventHandler(object sender, updateConfirmBatchCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class updateConfirmBatchCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal updateConfirmBatchCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string retVal {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string errMsg {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void sendMultiMailCompletedEventHandler(object sender, sendMultiMailCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class sendMultiMailCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal sendMultiMailCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string retVal {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string errMsg {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void sendMultiMail2CompletedEventHandler(object sender, sendMultiMail2CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class sendMultiMail2CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal sendMultiMail2CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string retVal {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string errMsg {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void selectBillStatusCompletedEventHandler(object sender, selectBillStatusCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class selectBillStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal selectBillStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string status {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string ntsStatus {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public string ntsCode {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[3]));
            }
        }
        
        /// <remarks/>
        public string retVal {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[4]));
            }
        }
        
        /// <remarks/>
        public string errMsg {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[5]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void selectExpireDtCompletedEventHandler(object sender, selectExpireDtCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class selectExpireDtCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal selectExpireDtCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string retVal {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string errMsg {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public string regYn {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[3]));
            }
        }
        
        /// <remarks/>
        public string expireDt {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[4]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void selectPointCompletedEventHandler(object sender, selectPointCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class selectPointCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal selectPointCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string retVal {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string errMsg {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public string gnlPoint {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[3]));
            }
        }
        
        /// <remarks/>
        public string bnsPoint {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[4]));
            }
        }
        
        /// <remarks/>
        public string totPoint {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[5]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void getPKIPolicyCompletedEventHandler(object sender, getPKIPolicyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getPKIPolicyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getPKIPolicyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string retVal {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string errMsg {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public string policy {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[3]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void getSecPasswdCompletedEventHandler(object sender, getSecPasswdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getSecPasswdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getSecPasswdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string retVal {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string errMsg {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public string secPasswd {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[3]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void initConnectionCompletedEventHandler(object sender, initConnectionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class initConnectionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal initConnectionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void selectMembInfoJsonCompletedEventHandler(object sender, selectMembInfoJsonCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class selectMembInfoJsonCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal selectMembInfoJsonCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string retVal {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string errMsg {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public string data {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[3]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void getMembJoinInfCompletedEventHandler(object sender, getMembJoinInfCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getMembJoinInfCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getMembJoinInfCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string retVal {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string errMsg {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public string frnNo {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[3]));
            }
        }
        
        /// <remarks/>
        public string userid {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[4]));
            }
        }
        
        /// <remarks/>
        public string passwd {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[5]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void changedStatusReqByIdCompletedEventHandler(object sender, changedStatusReqByIdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class changedStatusReqByIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal changedStatusReqByIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string retVal {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string errMsg {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string statusMsg {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void changedStatusReqByLinkCdCompletedEventHandler(object sender, changedStatusReqByLinkCdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class changedStatusReqByLinkCdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal changedStatusReqByLinkCdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string retVal {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string errMsg {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string statusMsg {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void changedStatusResByLinkCdCompletedEventHandler(object sender, changedStatusResByLinkCdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class changedStatusResByLinkCdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal changedStatusResByLinkCdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string retVal {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string errMsg {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void makeAndPublishSignDelayCompletedEventHandler(object sender, makeAndPublishSignDelayCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class makeAndPublishSignDelayCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal makeAndPublishSignDelayCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string retVal {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string errMsg {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string billNo {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public string gnlPoint {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[3]));
            }
        }
        
        /// <remarks/>
        public string bnsPoint {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[4]));
            }
        }
        
        /// <remarks/>
        public string totPoint {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[5]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void updateEtaxStatusToZCompletedEventHandler(object sender, updateEtaxStatusToZCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class updateEtaxStatusToZCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal updateEtaxStatusToZCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string retVal {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string errMsg {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void makeSpecTranCompletedEventHandler(object sender, makeSpecTranCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class makeSpecTranCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal makeSpecTranCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string retVal {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string errMsg {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string tid {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public string gnlPoint {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[3]));
            }
        }
        
        /// <remarks/>
        public string bnsPoint {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[4]));
            }
        }
        
        /// <remarks/>
        public string totPoint {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[5]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void sendSpecTranMailCompletedEventHandler(object sender, sendSpecTranMailCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class sendSpecTranMailCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal sendSpecTranMailCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string retVal {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string errMsg {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void sendEtaxFaxCompletedEventHandler(object sender, sendEtaxFaxCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class sendEtaxFaxCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal sendEtaxFaxCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string retVal {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string errMsg {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string gnlPoint {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public string bnsPoint {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[3]));
            }
        }
        
        /// <remarks/>
        public string totPoint {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[4]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void retryPeriodStatusNewCompletedEventHandler(object sender, retryPeriodStatusNewCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class retryPeriodStatusNewCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal retryPeriodStatusNewCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string retVal1 {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string errMsg1 {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void retryPeriodStatusNewBillCompletedEventHandler(object sender, retryPeriodStatusNewBillCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class retryPeriodStatusNewBillCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal retryPeriodStatusNewBillCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string retVal1 {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string errMsg1 {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
}

#pragma warning restore 1591